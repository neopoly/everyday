# Everyday

Everyday is a example based repository for solutions to common oss problems ruby developers have to struggle with almost everyday 

# Observer

`Observer` defines a tightly coupled one-to-many dependency between objects.

Use it if a change to one object effects one or more other objects.

The `subject` maintains a list of `observers` and notifies them of any state changes, by calling one of their methods.

## Example

Execute the example with:

```bash
ruby -Ilib:examples examples/observer.rb
```

### examples/observer.rb

```ruby
include_example 'observer'
```

### examples/observer/subject.rb

```ruby
include_example 'observer/subject'
```

### examples/observer/observer.rb

```ruby
include_example 'observer/observer'
```

# Publish-subscribe

`Publish-subscribe` defines a loosely coupled many-to-many dependency between objects.

It is a messaging pattern to decouple the senders (publishers) of a message from the receivers (subscribers) of a message.

A publisher is not sending a message directly to a specific subscriber, like in the observer pattern, instead published messages are pushed into a named channel, without knowledge of what, or even if, any subscribers are available.

Subscribers express interest in one or more of these channels, and only receive messages that are of interest, without knowledge of what, or even if, any publishers exist.

## Gems

### [wisper](https://github.com/krisleech/wisper)

A micro library providing Ruby objects with Publish-Subscribe capabilities

## Example

Execute the example with:

```bash
ruby -Ilib:examples examples/publish-subscribe.rb
```

### examples/publish-subscribe.rb

```ruby
include_example 'publish-subscribe'
```

### examples/publish-subscribe/channels.rb

```ruby
include_example 'publish-subscribe/channels'
```

### examples/publish-subscribe/email_service.rb

```ruby
include_example 'publish-subscribe/email_service'
```

### examples/publish-subscribe/user_gateway.rb

```ruby
include_example 'publish-subscribe/user_gateway'
```

## Installation

Add this line to your application's Gemfile:

```ruby
gem 'everyday'
```

And then execute:

    $ bundle

Or install it yourself as:

    $ gem install everyday

## Usage

TODO: Write usage instructions here

## Contributing

1. Fork it ( https://github.com/[my-github-username]/everyday/fork )
2. Create your feature branch (`git checkout -b my-new-feature`)
3. Commit your changes (`git commit -am 'Add some feature'`)
4. Push to the branch (`git push origin my-new-feature`)
5. Create a new Pull Request
